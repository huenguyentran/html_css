
LANGUAGE
- html, css, javascript
- js: add funtionality(chức năng)....
1.
- html(Hypertext Markup language): markup language, 
- css(Styling Language): styling language

2.
- javascript: programming language

3.
FRAMEWORKS
- ex: React

4.
VESION CONTROL SYSTEM
- git




How the website works?
- http : hypertext transfer Protocol
- DOM Document Object Model


http requests and reponses:

HTML Basic
- 6 heading elements(h1, h2)
h1: what this page is all about(only one)
h2: 

.entities(~~ icon)
  --- &...
  ---html entities: https://www.w3schools.com/html/html_entities.asp
  ---lorem for a dummy text 
  ---&nbsp;  non-breaking space, 2 chu luon di voi nhau ko  bi tach ra khi xuong dong
.Hyperlinks: href
. validate HTML: https://validator.w3.org/
. validate CSS: https://jigsaw.w3.org/

achive.org


7.Mô hình clients--server
clients: lap, tablet, PC,---> có 1 địa chỉ IP
server: chứa toàn bộ thông tin, giống 1 thư viện khổng lồ
        băng thông, dung lượng lớn + bật 24/7
        cũng có 1 địa chỉ IP
+ Domain name system: cho phép dùng 1 tên miền---> ứng với IP ---> truy cập vào được trang web
+ quá trình:
gõ lên thanh tìm kiếm tên miền---> server gửi qua 3 têp: .html, .js, .css -->hiển thị web

8. Static website, dynamic website:
Web tĩnh: khi người dùng truy cập người dùng ko thể bình luận tương tác với người dùng
web dộng: nội dung được update ontime(facebook: post, reel,... thay đổi sau khi tải lại trang)
          --> server lon quan lí---> cần back end lọc database, quảng lí dữ liệu

9. <hr> <br>: self-closing tag
+ <hr> hay <hr /> ---> gạch ngang
+ <br> hay <br /> ---> break ngắt dòng
+ <p> a     a </p>----> tức là: a a
10. <b> <i> <u>: normal tag
<b> bold: in đậm (dùng strong cho nội dung quang trong)
=== thẻ b và thẻ strong --> cùng thể hiện giống nhau, strong thì trình duyệt cho rằng đây là nội dung quang trọng
---> thẻ strong có ý nghĩa đối với trình duyệt
<i> italic: in nghiêng (dùng em để nhấn mạnh nội dung)
<u> underline: gạch chân
11. <ul> <ol> list
<ul>: unordered list: danh sách không có thứ tự
<ol>: ordered list: danh sách có thứ tụ
<li>: list item là thẻ con trực tiếp của ul, ol
emmet-gõ tắc:
vd ul>li*5, ul>li*5{phân tử số $}--> phan tu so 1 2 3 4 5, ol>li*4{noi dung $}
https://docs.emmet.io/cheat-sheet/

2 thuộc tính thông dụng của thẻ ol: 
  + bình thường
  + reversed: <ol reversed> <li> </li> </ol>...
  + <ol type="a"> ....--> chạy từ a

12. thẻ lít lồng nhau:
vd 1
      1.1
      1.2
    2
      2.1
      2.2

13. Thẻ <a>: anchor - gan kèm liên kết, email, sdt
href(hypertext reference)--> khai báo ulr mà trang web chuyển đến
. href=""--> tải lại trang
. href="#"--> trở lại đầu trang
. href="/"--> điều hướng về home, file index
vd: <a href="">tai lai trang</a>

<<ten> thuộc tinh> </<ten>>
target(thuộc tính) trong thẻ a: chỉ định cách mở liên kết được nhúng trong thẻ đó
. target="_self"--> mở tại trang hiện tại
. target="_blank"--> mở trong tab mới 
<a href="https://www.google.com" target="_self">google</a>

tel: liên kết với sdt(điều hướng đến 1 trình gọi điện thoại)
<a href="tel:00933872">goi em nha</a>
(trong trường hợp máy đã đăng nhập tài khoảng mail hoặc gọi được)
mailto: liên kết với email

14.thẻ img: 2 cách: 1 đường link ảnh, 2 là ảnh từ trong máy 
<img src="https://....." / alt="hinh anh ne">--> địa chỉ hình ảnh
---> có thể xóa đọa từ dấu hỏi trở đi(kể cả dấu ? hay ko cos ? đều được) trong link(phần này set kích thước anh thoi )
<img src="image/OIP.jpg" />
https://unsplash.com/fr
<img      src=                "..............................." />
      thuộc tính(attribute)           giá trị(value)
thuộc tính alt: các công cụ tìm kiếm (screen reader) dựa trên thẻ alt
.. phần hosting--> up ảnh lên máy chủ rồi sd

width, height---> đưa vào cuối hay đầu src đều được

15.html path: đường dẫn
có 2 loại đường dẫn: tương đối, tuyệt đối
../../--> truy cập các thư mục cha mỗi lần ../ --> nhảy lên 1 cấp
html path:đường dẫn tương đối là lấy từ file đang xét(vd file index..)
root path: lấy từ thư mục cha của project

16. thẻ pre: preformatted: trình duyệt để nguyên định dạng trong thẻ pre, kể cả kiểu chữ
<pre> Quanh
               năm một          mỗi lo học lại</pre>

17.thẻ code: <code> là một thẻ có ngữ nghĩa(vd thẻ <em>--> in nghiêng có ngữ nghĩa, <strong> in đậm có ngữ nghĩa)
coi lại kiến thức thẻ có ngữ nghĩa ko xó ngữ nghĩa ở thẻ đánh dấu(<b> <i>...)
ý nghĩa: thể hiện một khối code độc lập (càn chuyển các ký tự đặc biệt sang HTML Entities)
>>ko thụt thẻ code vào trong + dùng kèm thẻ <pre> để giữ định dạng khối
https://codebeautify.org/

18. HTML table basic:
<table></table>
tr: table row--> một hàng trong bảng html
td: table data--> một ô dữ liệu trong một bảng
th: table header---> một ô tiêu đề trong bảng
về nd chia thành: thead--tbody--tfoot--> ko ảnh hưởng về hình thức, hỗ trợ về việc tìm kiếm...

18.1 Colspan và Rowspan(thuộc tính cho tag td)
Colspan: chỉ định phần tử chứa bao nhiêu cột
Rowspan: chỉ định phần tử chứa bao nhiêu hàng

CSS 
Cascading Style Sheets
có 3 nơi có thể đặt css: inline(css nội tuyến), internal(css nội bộ), external(css bên ngoài)
<tag style="css"/>     <style>css</style>       <link href="style.css"/>
19.1:inline là cách viết mã css ngay bên trong phần tử cơ bản HTML
vd: <h1 <name of attribute>="phần này là giá trị cho thuộc tính(value for attribute)">
<h1 style="color: blue">nội dung</h1>
--> style: attribute
--> color: property
--> blue: value

19.2 css internal: là cách viết mã css trong cặp thẻ style(đặt trong khôi head)
1. ưu: code tách biệt với phần tử, có thể áp dụng với toàn trang(ví dụ: aps dụng với toàn bộ thẻ h1)
2. nhược: khó quản lí hi dự án lớn, quá nhiều mã css làm tệp html cồng kềnh 
h1{                   // h1: selector vùng chọn
  color: blue;        //property: value
  font-style: italic;
}

19.3 external css: 